var _user$project$Main$exclude = F2(
	function (full, part) {
		return A2(
			_elm_lang$core$List$filter,
			function (l) {
				return _elm_lang$core$Basics$not(
					A2(_elm_lang$core$List$member, l, part));
			},
			full);
	});
var _user$project$Main$findRoots = function (items) {
	var allChildren = _elm_lang$core$List$concat(
		A2(
			_elm_lang$core$List$map,
			function (l) {
				return l.children;
			},
			items));
	var allIds = A2(
		_elm_lang$core$List$map,
		function (l) {
			return l.id;
		},
		items);
	return A2(_user$project$Main$exclude, allIds, allChildren);
};
var _user$project$Main$getChildren = function (item) {
	var _p0 = item;
	if (_p0.ctor === 'Nothing') {
		return _elm_lang$core$Native_List.fromArray(
			[]);
	} else {
		return _p0._0.children;
	}
};
var _user$project$Main$getId = function (item) {
	var _p1 = item;
	if (_p1.ctor === 'Nothing') {
		return -1;
	} else {
		return _p1._0.id;
	}
};
var _user$project$Main$getParent = F2(
	function (id, items) {
		return _elm_lang$core$List$head(
			A2(
				_elm_lang$core$List$filter,
				function (l) {
					return A2(_elm_lang$core$List$member, id, l.children);
				},
				items));
	});
var _user$project$Main$getActive = function (items) {
	return _elm_lang$core$List$head(
		A2(
			_elm_lang$core$List$filter,
			function (l) {
				return l.model.isActive;
			},
			items));
};
var _user$project$Main$init = {
	items: _elm_lang$core$Native_List.fromArray(
		[]),
	uid: 0
};
var _user$project$Main$Model = F2(
	function (a, b) {
		return {items: a, uid: b};
	});
var _user$project$Main$IndexedItem = F3(
	function (a, b, c) {
		return {id: a, children: b, model: c};
	});
var _user$project$Main$updateHelp = F3(
	function (targetId, msg, _p2) {
		var _p3 = _p2;
		var _p5 = _p3.model;
		var _p4 = _p3.id;
		return A3(
			_user$project$Main$IndexedItem,
			_p4,
			_p3.children,
			_elm_lang$core$Native_Utils.eq(targetId, _p4) ? A2(_user$project$Item$update, msg, _p5) : _elm_lang$core$Native_Utils.update(
				_p5,
				{isActive: false}));
	});
var _user$project$Main$addChildren = F3(
	function (targetId, newChildren, _p6) {
		var _p7 = _p6;
		var _p9 = _p7.id;
		var _p8 = _p7.children;
		return A3(
			_user$project$Main$IndexedItem,
			_p9,
			_elm_lang$core$Native_Utils.eq(targetId, _p9) ? A2(_elm_lang$core$Basics_ops['++'], _p8, newChildren) : _p8,
			_elm_lang$core$Native_Utils.update(
				_p7.model,
				{isActive: false}));
	});
var _user$project$Main$replaceChildren = F4(
	function (targetId, oldChildren, newChildren, _p10) {
		var _p11 = _p10;
		var _p13 = _p11.id;
		var _p12 = _p11.children;
		return A3(
			_user$project$Main$IndexedItem,
			_p13,
			_elm_lang$core$Native_Utils.eq(targetId, _p13) ? A2(
				_elm_lang$core$Basics_ops['++'],
				A2(_user$project$Main$exclude, _p12, oldChildren),
				newChildren) : _p12,
			_elm_lang$core$Native_Utils.update(
				_p11.model,
				{isActive: false}));
	});
var _user$project$Main$update = F2(
	function (message, _p14) {
		var _p15 = _p14;
		var _p19 = _p15.uid;
		var _p18 = _p15;
		var _p17 = _p15.items;
		var activeChildren = A3(
			_elm_lang$core$Debug$log,
			'123',
			_user$project$Main$getChildren,
			_user$project$Main$getActive(_p17));
		var active = _user$project$Main$getId(
			_user$project$Main$getActive(_p17));
		var parent = _user$project$Main$getId(
			A2(_user$project$Main$getParent, active, _p17));
		var _p16 = message;
		switch (_p16.ctor) {
			case 'AddParent':
				return _elm_lang$core$Native_Utils.update(
					_p18,
					{
						items: A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Native_List.fromArray(
								[
									A3(
									_user$project$Main$IndexedItem,
									_p19,
									_elm_lang$core$Native_List.fromArray(
										[active]),
									_user$project$Item$init(
										A2(
											_elm_lang$core$Basics_ops['++'],
											'New entity',
											_elm_lang$core$Basics$toString(_p19))))
								]),
							A2(
								_elm_lang$core$List$map,
								A3(
									_user$project$Main$replaceChildren,
									parent,
									_elm_lang$core$Native_List.fromArray(
										[active]),
									_elm_lang$core$Native_List.fromArray(
										[_p19])),
								_p17)),
						uid: _p19 + 1
					});
			case 'AddSibling':
				return _elm_lang$core$Native_Utils.update(
					_p18,
					{
						items: A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Native_List.fromArray(
								[
									A3(
									_user$project$Main$IndexedItem,
									_p19,
									_elm_lang$core$Native_List.fromArray(
										[]),
									_user$project$Item$init(
										A2(
											_elm_lang$core$Basics_ops['++'],
											'New entity',
											_elm_lang$core$Basics$toString(_p19))))
								]),
							A2(
								_elm_lang$core$List$map,
								A2(
									_user$project$Main$addChildren,
									parent,
									_elm_lang$core$Native_List.fromArray(
										[_p19])),
								_p17)),
						uid: _p19 + 1
					});
			case 'AddChild':
				return _elm_lang$core$Native_Utils.update(
					_p18,
					{
						items: A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Native_List.fromArray(
								[
									A3(
									_user$project$Main$IndexedItem,
									_p19,
									_elm_lang$core$Native_List.fromArray(
										[]),
									_user$project$Item$init(
										A2(
											_elm_lang$core$Basics_ops['++'],
											'New entity',
											_elm_lang$core$Basics$toString(_p19))))
								]),
							A2(
								_elm_lang$core$List$map,
								A2(
									_user$project$Main$addChildren,
									active,
									_elm_lang$core$Native_List.fromArray(
										[_p19])),
								_p17)),
						uid: _p19 + 1
					});
			case 'Remove':
				return _elm_lang$core$Native_Utils.update(
					_p18,
					{
						items: A2(
							_elm_lang$core$List$map,
							A2(_user$project$Main$addChildren, parent, activeChildren),
							A2(
								_elm_lang$core$List$filter,
								function (l) {
									return _elm_lang$core$Basics$not(
										_elm_lang$core$Native_Utils.eq(l.id, active));
								},
								_p17)),
						uid: _p19 + 1
					});
			default:
				return _elm_lang$core$Native_Utils.update(
					_p18,
					{
						items: A2(
							_elm_lang$core$List$map,
							A2(_user$project$Main$updateHelp, _p16._0, _p16._1),
							_p17)
					});
		}
	});
var _user$project$Main$Modify = F2(
	function (a, b) {
		return {ctor: 'Modify', _0: a, _1: b};
	});
var _user$project$Main$viewBranches = F2(
	function (items, ids) {
		var selectedItems = A2(
			_elm_lang$core$List$filter,
			function (l) {
				return A2(_elm_lang$core$List$member, l.id, ids);
			},
			items);
		var _p20 = ids;
		if (_p20.ctor === '[]') {
			return _elm_lang$html$Html$text('');
		} else {
			return A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$style(
						_elm_lang$core$Native_List.fromArray(
							[
								{ctor: '_Tuple2', _0: 'paddingLeft', _1: '20px'}
							]))
					]),
				A2(
					_elm_lang$core$List$map,
					function (l) {
						return A2(
							_elm_lang$html$Html$div,
							_elm_lang$core$Native_List.fromArray(
								[]),
							_elm_lang$core$Native_List.fromArray(
								[
									A2(
									_elm_lang$html$Html_App$map,
									_user$project$Main$Modify(l.id),
									A2(
										_elm_lang$html$Html$div,
										_elm_lang$core$Native_List.fromArray(
											[]),
										_elm_lang$core$Native_List.fromArray(
											[
												_user$project$Item$view(l.model)
											]))),
									A2(_user$project$Main$viewBranches, items, l.children)
								]));
					},
					selectedItems));
		}
	});
var _user$project$Main$Remove = {ctor: 'Remove'};
var _user$project$Main$AddChild = {ctor: 'AddChild'};
var _user$project$Main$AddSibling = {ctor: 'AddSibling'};
var _user$project$Main$AddParent = {ctor: 'AddParent'};
var _user$project$Main$view = function (model) {
	var tree = A2(
		_user$project$Main$viewBranches,
		model.items,
		_user$project$Main$findRoots(model.items));
	var remove = A2(
		_elm_lang$html$Html$button,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Events$onClick(_user$project$Main$Remove)
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text('Remove')
			]));
	var addChild = A2(
		_elm_lang$html$Html$button,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Events$onClick(_user$project$Main$AddChild)
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text('Add Child')
			]));
	var addSibling = A2(
		_elm_lang$html$Html$button,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Events$onClick(_user$project$Main$AddSibling)
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text('Add Sibling')
			]));
	var addParent = A2(
		_elm_lang$html$Html$button,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Events$onClick(_user$project$Main$AddParent)
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text('Add Parent')
			]));
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Native_List.fromArray(
				[addParent, addSibling, addChild, remove]),
			_elm_lang$core$Native_List.fromArray(
				[tree])));
};
var _user$project$Main$main = {
	main: _elm_lang$html$Html_App$beginnerProgram(
		{model: _user$project$Main$init, update: _user$project$Main$update, view: _user$project$Main$view})
};
